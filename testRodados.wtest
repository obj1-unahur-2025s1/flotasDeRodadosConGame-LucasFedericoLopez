import rodados.*

describe "test de rodados" {
  const deportes = new Dependencia(empleados = 45)
  const cultura = new Dependencia(empleados = 31)
  const cachito = new Corsa(color = "rojo")
  method initialize() {
    deportes.agregarAFlota(cachito)
    deportes.agregarAFlota(new Corsa(color = "azul"))
    deportes.agregarAFlota(new Corsa(color = "verde"))
    deportes.agregarAFlota(new Kwid(tanqueAdicional = true))
    deportes.agregarAFlota(new Especial(capacidad = 5, velMax = 160, peso = 1200, color = "beige"))
    cultura.agregarAFlota(cachito)
    cultura.agregarAFlota(new Kwid(tanqueAdicional = true))
    cultura.agregarAFlota(new Kwid(tanqueAdicional = true))
    cultura.agregarAFlota(new Kwid(tanqueAdicional = false))
    cultura.agregarAFlota(trafic)
    trafic.interior(popular)
    trafic.motor(bataton)
  }
  test "Deportes tiene peso total 6450" {
    assert.equals(1300 + 1300 + 1300 + 1350 + 1200, deportes.pesoTotalFlota())
  }
  test "Cultura tiene peso total 10700" {
    assert.equals(1300 + 1350 + 1350 + 1200 + 5500, cultura.pesoTotalFlota())
  }
  test "Deportes esta bien equipada" {
    assert.that(deportes.estaBienEquipada())
  }
  test "Cultura no esta bien equipada" {
    assert.notThat(cultura.estaBienEquipada())
  }
  test "Deportes tiene capacidad en color azul" {
    assert.equals(7, deportes.capacidadTotalEnColor("azul"))
  }
  test "Cultura tiene capacidad en color azul" {
    assert.equals(10, cultura.capacidadTotalEnColor("azul"))
  }
  test "el color del rodado mas rapido de deportes es beige" {
    assert.equals("beige", deportes.colorDelRodadoMasRapido())
  }
  test "el color del rodado mas rapido de cultura es azul" {
    assert.equals("rojo", cultura.colorDelRodadoMasRapido())
  }
  test "deportes es grande" {
    assert.that(deportes.esGrande())
  }
  test "cultura no es grande" {
    assert.notThat(cultura.esGrande())
  }
  test "la capacidad faltante de Deportes es" {
    
  }
  test "la capacidad faltante de Cultura es" {
    
  }
}